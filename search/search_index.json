{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"api/","text":"API documentation \u00b6 my_function ( param1 , param2 = None ) \u00b6 Show source code in kinoml/smth.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def my_function ( param1 : int , param2 : Optional [ str ] = None ) -> str : \"\"\" A short description of this function. A longer description of this function. You can use more lines. This is code block, as usual. ```python s = \"This is a Python code block :)\" ``` Arguments: param1: An integer? param2: A string? If you have a long description, you can split it on multiple lines. Just remember to indent those lines with at least two more spaces. They will all be concatenated in one line, so do not try to use complex markup here. Note: We omitted the type hints next to the parameters names. Usually you would write something like `param1 (int): ...`, but `mkdocstrings` gets the type information from the signature, so it's not needed here. Exceptions are written the same. Raises: OSError: Explain when this error is thrown. RuntimeError: Explain as well. Multi-line description, etc. Let's see the return value section now. Returns: A description of the value that is returned. Again multiple lines are allowed. They will also be concatenated to one line, so do not use complex markup here. Note: Other words are supported: - `Args`, `Arguments`, `Params` and `Parameters` for the parameters. - `Raise`, `Raises`, `Except`, and `Exceptions` for exceptions. - `Return` or `Returns` for return value. They are all case-insensitive, so you can write `RETURNS:` or `params:`. \"\"\" return f \" {param2}{param1} \" A short description of this function. A longer description of this function. You can use more lines. This is code block, as usual. s = \"This is a Python code block :)\" Parameters Name Type Description Default param1 int An integer? required param2 Optional[str] A string? If you have a long description, you can split it on multiple lines. Just remember to indent those lines with at least two more spaces. They will all be concatenated in one line, so do not try to use complex markup here. None Note We omitted the type hints next to the parameters names. Usually you would write something like param1 (int): ... , but mkdocstrings gets the type information from the signature, so it's not needed here. Exceptions are written the same. Exceptions Type Description OSError Explain when this error is thrown. RuntimeError Explain as well. Multi-line description, etc. Let's see the return value section now. Returns Type Description str A description of the value that is returned. Again multiple lines are allowed. They will also be concatenated to one line, so do not use complex markup here. Note Other words are supported: Args , Arguments , Params and Parameters for the parameters. Raise , Raises , Except , and Exceptions for exceptions. Return or Returns for return value. They are all case-insensitive, so you can write RETURNS: or params: . Unit and regression test for the kinoml package. test_kinoml_imported () \u00b6 Show source code in tests/test_kinoml.py 11 12 13 14 15 def test_kinoml_imported (): \"\"\" Sample test, will always pass so long as import statement worked \"\"\" assert \"kinoml\" in sys . modules Sample test, will always pass so long as import statement worked","title":"Reference"},{"location":"api/#api-documentation","text":"","title":"API documentation"},{"location":"api/#kinoml.smth.my_function","text":"Show source code in kinoml/smth.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def my_function ( param1 : int , param2 : Optional [ str ] = None ) -> str : \"\"\" A short description of this function. A longer description of this function. You can use more lines. This is code block, as usual. ```python s = \"This is a Python code block :)\" ``` Arguments: param1: An integer? param2: A string? If you have a long description, you can split it on multiple lines. Just remember to indent those lines with at least two more spaces. They will all be concatenated in one line, so do not try to use complex markup here. Note: We omitted the type hints next to the parameters names. Usually you would write something like `param1 (int): ...`, but `mkdocstrings` gets the type information from the signature, so it's not needed here. Exceptions are written the same. Raises: OSError: Explain when this error is thrown. RuntimeError: Explain as well. Multi-line description, etc. Let's see the return value section now. Returns: A description of the value that is returned. Again multiple lines are allowed. They will also be concatenated to one line, so do not use complex markup here. Note: Other words are supported: - `Args`, `Arguments`, `Params` and `Parameters` for the parameters. - `Raise`, `Raises`, `Except`, and `Exceptions` for exceptions. - `Return` or `Returns` for return value. They are all case-insensitive, so you can write `RETURNS:` or `params:`. \"\"\" return f \" {param2}{param1} \" A short description of this function. A longer description of this function. You can use more lines. This is code block, as usual. s = \"This is a Python code block :)\" Parameters Name Type Description Default param1 int An integer? required param2 Optional[str] A string? If you have a long description, you can split it on multiple lines. Just remember to indent those lines with at least two more spaces. They will all be concatenated in one line, so do not try to use complex markup here. None Note We omitted the type hints next to the parameters names. Usually you would write something like param1 (int): ... , but mkdocstrings gets the type information from the signature, so it's not needed here. Exceptions are written the same. Exceptions Type Description OSError Explain when this error is thrown. RuntimeError Explain as well. Multi-line description, etc. Let's see the return value section now. Returns Type Description str A description of the value that is returned. Again multiple lines are allowed. They will also be concatenated to one line, so do not use complex markup here. Note Other words are supported: Args , Arguments , Params and Parameters for the parameters. Raise , Raises , Except , and Exceptions for exceptions. Return or Returns for return value. They are all case-insensitive, so you can write RETURNS: or params: . Unit and regression test for the kinoml package.","title":"my_function()"},{"location":"api/#kinoml.tests.test_kinoml.test_kinoml_imported","text":"Show source code in tests/test_kinoml.py 11 12 13 14 15 def test_kinoml_imported (): \"\"\" Sample test, will always pass so long as import statement worked \"\"\" assert \"kinoml\" in sys . modules Sample test, will always pass so long as import statement worked","title":"test_kinoml_imported()"},{"location":"getting_started/","text":"Getting started \u00b6 This page details how to get started with KinoML.","title":"Getting started"},{"location":"getting_started/#getting-started","text":"This page details how to get started with KinoML.","title":"Getting started"}]}