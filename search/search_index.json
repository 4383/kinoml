{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"KinoML \u00b6 Structure-informed machine learning for kinase modeling Warning This is module is undergoing heavy development. None of the API calls are final. This software is provided without any guarantees of correctness, you will likely encounter bugs. If you are interested in this code, please wait for the official release to use it. In the mean time, to stay informed of development progress you are encouraged to: Subscribe for new releases (use Watch> Releases only on GitHub) Check out the Github repository .","title":"Home"},{"location":"#kinoml","text":"Structure-informed machine learning for kinase modeling Warning This is module is undergoing heavy development. None of the API calls are final. This software is provided without any guarantees of correctness, you will likely encounter bugs. If you are interested in this code, please wait for the official release to use it. In the mean time, to stay informed of development progress you are encouraged to: Subscribe for new releases (use Watch> Releases only on GitHub) Check out the Github repository .","title":"KinoML"},{"location":"api/","text":"API documentation \u00b6 KinoML Machine Learning for kinase modeling","title":"API Reference"},{"location":"api/#api-documentation","text":"KinoML Machine Learning for kinase modeling","title":"API documentation"},{"location":"getting_started/","text":"Getting started \u00b6 This page details how to get started with KinoML.","title":"Getting started"},{"location":"getting_started/#getting-started","text":"This page details how to get started with KinoML.","title":"Getting started"},{"location":"howtodocs/","text":"Welcome to mkdocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. How to write docs with mkdocs \u00b6 MkDocs are markdown documents, so the answer is easy: just use plain Markdown and, optionally, the supported extensions. More info in the official docs . The theme we are using is material , which supports very fancy extensions . For example, admonitions like this block: Tip This is so cool huh? Check all styles here . !!! tip This is so cool huh? Check all styles [here](https://squidfunk.github.io/mkdocs-material/extensions/admonition/#types). Or citations: This is a very important finding. 1 This is yet another finding. 2 These are written with labels like this: > This is a very important finding.[^1] > This is yet another finding.[^Rodr\u00edguez-Guerra and Pedregal, 1990] [^1]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. [^Rodr\u00edguez-Guerra and Pedregal, 1990]: A kid named Jaime. Docstrings \u00b6 We are using mkdocstrings for our docstrings, which deviate slightly from the more popular numpydoc syntax. Instead, it's closer to Google-style docstrings . To sum up, this is a more or less complete example of the requested syntax: \"\"\" A short description of this function. A longer description of this function. You can use more lines. This is code block, as usual. ```python s = \"This is a Python code block :)\" ``` Arguments: param1: An integer? param2: A string? If you have a long description, you can split it on multiple lines. Just remember to indent those lines with at least two more spaces. They will all be concatenated in one line, so do not try to use complex markup here. Note: We omitted the type hints next to the parameters names. Usually you would write something like `param1 (int): ...`, but `mkdocstrings` gets the type information from the signature, so it's not needed here. Exceptions are written the same. Raises: OSError: Explain when this error is thrown. RuntimeError: Explain as well. Multi-line description, etc. Let's see the return value section now. Returns: A description of the value that is returned. Again multiple lines are allowed. They will also be concatenated to one line, so do not use complex markup here. Note: Other words are supported: - `Args`, `Arguments`, `Params` and `Parameters` for the parameters. - `Raise`, `Raises`, `Except`, and `Exceptions` for exceptions. - `Return` or `Returns` for return value. They are all case-insensitive, so you can write `RETURNS:` or `params:`. \"\"\" More docstring examples \u00b6 More examples, with and without types: def function ( arg1 , kwarg = None ): \"\"\" Example function Parameters: arg1 (dict): Some description for this argument. This type (in parenthesis) is ignored. kwarg: Some more descriptions Returns: A description for the returned value __Examples__ The triple quotes below should be backticks (`) '''python 2 + 2 == 4 # True ''' \"\"\" pass def function_with_types ( arg1 : dict , kwarg : \"type hints can be whatever\" = None ) -> tuple : \"\"\" Example function. Types will be inferred from type hints! Parameters: arg1: Yeah kwarg: None Returns: Something \"\"\" pass Lorem ipsum dolor sit amet, consectetur adipiscing elit. \u21a9 A kid named Jaime. \u21a9","title":"Writing docs"},{"location":"howtodocs/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to mkdocs"},{"location":"howtodocs/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"howtodocs/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"howtodocs/#how-to-write-docs-with-mkdocs","text":"MkDocs are markdown documents, so the answer is easy: just use plain Markdown and, optionally, the supported extensions. More info in the official docs . The theme we are using is material , which supports very fancy extensions . For example, admonitions like this block: Tip This is so cool huh? Check all styles here . !!! tip This is so cool huh? Check all styles [here](https://squidfunk.github.io/mkdocs-material/extensions/admonition/#types). Or citations: This is a very important finding. 1 This is yet another finding. 2 These are written with labels like this: > This is a very important finding.[^1] > This is yet another finding.[^Rodr\u00edguez-Guerra and Pedregal, 1990] [^1]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. [^Rodr\u00edguez-Guerra and Pedregal, 1990]: A kid named Jaime.","title":"How to write docs with mkdocs"},{"location":"howtodocs/#docstrings","text":"We are using mkdocstrings for our docstrings, which deviate slightly from the more popular numpydoc syntax. Instead, it's closer to Google-style docstrings . To sum up, this is a more or less complete example of the requested syntax: \"\"\" A short description of this function. A longer description of this function. You can use more lines. This is code block, as usual. ```python s = \"This is a Python code block :)\" ``` Arguments: param1: An integer? param2: A string? If you have a long description, you can split it on multiple lines. Just remember to indent those lines with at least two more spaces. They will all be concatenated in one line, so do not try to use complex markup here. Note: We omitted the type hints next to the parameters names. Usually you would write something like `param1 (int): ...`, but `mkdocstrings` gets the type information from the signature, so it's not needed here. Exceptions are written the same. Raises: OSError: Explain when this error is thrown. RuntimeError: Explain as well. Multi-line description, etc. Let's see the return value section now. Returns: A description of the value that is returned. Again multiple lines are allowed. They will also be concatenated to one line, so do not use complex markup here. Note: Other words are supported: - `Args`, `Arguments`, `Params` and `Parameters` for the parameters. - `Raise`, `Raises`, `Except`, and `Exceptions` for exceptions. - `Return` or `Returns` for return value. They are all case-insensitive, so you can write `RETURNS:` or `params:`. \"\"\"","title":"Docstrings"},{"location":"howtodocs/#more-docstring-examples","text":"More examples, with and without types: def function ( arg1 , kwarg = None ): \"\"\" Example function Parameters: arg1 (dict): Some description for this argument. This type (in parenthesis) is ignored. kwarg: Some more descriptions Returns: A description for the returned value __Examples__ The triple quotes below should be backticks (`) '''python 2 + 2 == 4 # True ''' \"\"\" pass def function_with_types ( arg1 : dict , kwarg : \"type hints can be whatever\" = None ) -> tuple : \"\"\" Example function. Types will be inferred from type hints! Parameters: arg1: Yeah kwarg: None Returns: Something \"\"\" pass Lorem ipsum dolor sit amet, consectetur adipiscing elit. \u21a9 A kid named Jaime. \u21a9","title":"More docstring examples"}]}