{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"KinoML \u00b6 Structure-informed machine learning for kinase modeling Warning This is module is undergoing heavy development. None of the API calls are final. This software is provided without any guarantees of correctness, you will likely encounter bugs. If you are interested in this code, please wait for the official release to use it. In the mean time, to stay informed of development progress you are encouraged to: Subscribe for new releases (use Watch> Releases only on GitHub) Check out the Github repository .","title":"Home"},{"location":"#kinoml","text":"Structure-informed machine learning for kinase modeling Warning This is module is undergoing heavy development. None of the API calls are final. This software is provided without any guarantees of correctness, you will likely encounter bugs. If you are interested in this code, please wait for the official release to use it. In the mean time, to stay informed of development progress you are encouraged to: Subscribe for new releases (use Watch> Releases only on GitHub) Check out the Github repository .","title":"KinoML"},{"location":"api/","text":"API reference \u00b6 Work in progress.","title":"API Reference"},{"location":"api/#api-reference","text":"Work in progress.","title":"API reference"},{"location":"getting_started/","text":"Getting started \u00b6 This page details how to get started with KinoML.","title":"Getting started"},{"location":"getting_started/#getting-started","text":"This page details how to get started with KinoML.","title":"Getting started"},{"location":"howtodocs/","text":"How to write docs with mkdocs \u00b6 For full documentation visit mkdocs.org . Basics \u00b6 mkdocs serve - Start the live-reloading docs server locally Project layout: mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. MkDocs are markdown documents, so the answer is easy: just use plain Markdown and, optionally, the supported extensions. More info in the official docs . Supported extensions \u00b6 The theme we are using is material , which supports very fancy extensions . Admonitions \u00b6 Tip This is so cool huh? Check all styles here . !!! tip This is so cool huh? Check all styles [ here ]( https://squidfunk.github.io/mkdocs-material/extensions/admonition/#types ). Citations \u00b6 This is a very important finding. 1 This is yet another finding. 2 These are written with labels like this: > This is a very important finding.[^1] > This is yet another finding.[^Rodr\u00edguez-Guerra and Pedregal, 1990] [ ^1 ]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. [ ^Rodr\u00edguez-Guerra and Pedregal, 1990 ]: A kid named Jaime. LaTeX \u00b6 Either in blocks \\frac{n!}{k!(n-k)!} = \\binom{n}{k} * Jaime \\frac{n!}{k!(n-k)!} = \\binom{n}{k} * Jaime $$ \\frac {n ! }{k !( n - k )! } = \\binom {n}{k} * Jaime $$ or inline: This my best equation ever: p(x|y) = \\frac{p(y|x)p(x)}{p(y)} p(x|y) = \\frac{p(y|x)p(x)}{p(y)} This my best equation ever: $ p ( x|y ) = \\frac {p ( y|x ) p ( x ) }{p ( y ) } $ Checkboxes \u00b6 Checkbox Checkbox - [ ] Checkbox - [X] Checkbox Emoji \u00b6 Github shortcuts are supported: :smile: :heart: :thumbsup: Tabbed fences \u00b6 Step 1 This is the step 1 Step 2 # This is the step 2 with python code highlighting he = Element ( \"Helium\" ) Step 3 This is the step 3 This line interrupts the fences and creates a new block of tabs Step 4 # This is the step 4 with python code highlighting be = Element ( \"Beryllium\" ) Obtained with: ``` tab=\"Step 1\" This is the step 1 ``` ```python tab=\"Step 2\" # This is the step 2 with python code highlighting he = Element(\"Helium\") ``` ``` tab=\"Step 3\" This is the step 3 ``` This line interrupts the fences and creates a new block of tabs ```python tab=\"Step 4\" # This is the step 4 with python code highlighting be = Element(\"Beryllium\") ``` Extra inline markup \u00b6 Code Result ==hey== hey ~~hey~~ hey ^^hey^^ hey a^migo^ a migo --> \u2192 Docstrings \u00b6 We are using mkdocstrings for our docstrings, which deviate slightly from the more popular numpydoc syntax. Instead, it's closer to Google-style docstrings . To sum up, this is a more or less complete example of the requested syntax: \"\"\" A short description of this function. A longer description of this function. You can use more lines. This is code block, as usual. ```python s = \"This is a Python code block :)\" ``` Arguments: param1: An integer? param2: A string? If you have a long description, you can split it on multiple lines. Just remember to indent those lines with at least two more spaces. They will all be concatenated in one line, so do not try to use complex markup here. Note: We omitted the type hints next to the parameters names. Usually you would write something like `param1 (int): ...`, but `mkdocstrings` gets the type information from the signature, so it's not needed here. Exceptions are written the same. Raises: OSError: Explain when this error is thrown. RuntimeError: Explain as well. Multi-line description, etc. Let's see the return value section now. Returns: A description of the value that is returned. Again multiple lines are allowed. They will also be concatenated to one line, so do not use complex markup here. Note: Other words are supported: - `Args`, `Arguments`, `Params` and `Parameters` for the parameters. - `Raise`, `Raises`, `Except`, and `Exceptions` for exceptions. - `Return` or `Returns` for return value. They are all case-insensitive, so you can write `RETURNS:` or `params:`. __Examples__ Experimental support. You need code fences and an extra blank line at the end so they can be highlighted _and_ recognized by `pytest`. Check https://github.com/pawamoy/mkdocstrings/issues/52 for updates. ```python >>> 2 + 2 == 4 True ``` \"\"\" Real docstring examples \u00b6 Check docs._docstrings_example and its source code below. Example module to show how docstrings are written for mkdocs + mkdocstrings example_function ( arg1 , kwarg = None ) \u00b6 Show source code in docs/_docstrings_example.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def example_function ( arg1 , kwarg = None ) -> object : \"\"\" Example function to demonstrate how APIs are rendered Parameters: arg1 (dict): Some description for this argument. This type (in parenthesis) is ignored. kwarg: Some more descriptions Returns: A description for the returned value __Examples__ This can be automatically tested with `pytest --doctest-modules`! Syntax might change subtly in the future. Check https://github.com/pawamoy/mkdocstrings/issues/52 ```python >>> 2 + 2 == 4 True # this passes pytest >>> 2 + 2 == 5 True # this fails pytest ``` \"\"\" pass Example function to demonstrate how APIs are rendered Parameters Name Type Description Default arg1 _empty Some description for this argument. This type (in parenthesis) is ignored. required kwarg _empty Some more descriptions None Returns Type Description object A description for the returned value Examples This can be automatically tested with pytest --doctest-modules ! Syntax might change subtly in the future. Check https://github.com/pawamoy/mkdocstrings/issues/52 >>> 2 + 2 == 4 True # this passes pytest >>> 2 + 2 == 5 True # this fails pytest example_function_with_type_hints ( arg1 , kwarg = None ) \u00b6 Show source code in docs/_docstrings_example.py 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 def example_function_with_type_hints ( arg1 : dict , kwarg : \"whatever\" = None ) -> object : \"\"\" Example function to demonstrate how APIs are rendered Parameters: arg1: Some description for this argument. kwarg: Some more descriptions Returns: A description for the returned value __Examples__ This can be automatically tested with `pytest --doctest-modules`! Syntax might change subtly in the future. Check https://github.com/pawamoy/mkdocstrings/issues/52 ```python >>> 2 + 2 == 4 True # this passes pytest >>> 2 + 2 == 5 True # this fails pytest ``` \"\"\" pass Example function to demonstrate how APIs are rendered Parameters Name Type Description Default arg1 dict Some description for this argument. required kwarg whatever Some more descriptions None Returns Type Description object A description for the returned value Examples This can be automatically tested with pytest --doctest-modules ! Syntax might change subtly in the future. Check https://github.com/pawamoy/mkdocstrings/issues/52 >>> 2 + 2 == 4 True # this passes pytest >>> 2 + 2 == 5 True # this fails pytest Lorem ipsum dolor sit amet, consectetur adipiscing elit. \u21a9 A kid named Jaime. \u21a9","title":"How to write docs"},{"location":"howtodocs/#how-to-write-docs-with-mkdocs","text":"For full documentation visit mkdocs.org .","title":"How to write docs with mkdocs"},{"location":"howtodocs/#basics","text":"mkdocs serve - Start the live-reloading docs server locally Project layout: mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. MkDocs are markdown documents, so the answer is easy: just use plain Markdown and, optionally, the supported extensions. More info in the official docs .","title":"Basics"},{"location":"howtodocs/#supported-extensions","text":"The theme we are using is material , which supports very fancy extensions .","title":"Supported extensions"},{"location":"howtodocs/#admonitions","text":"Tip This is so cool huh? Check all styles here . !!! tip This is so cool huh? Check all styles [ here ]( https://squidfunk.github.io/mkdocs-material/extensions/admonition/#types ).","title":"Admonitions"},{"location":"howtodocs/#citations","text":"This is a very important finding. 1 This is yet another finding. 2 These are written with labels like this: > This is a very important finding.[^1] > This is yet another finding.[^Rodr\u00edguez-Guerra and Pedregal, 1990] [ ^1 ]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. [ ^Rodr\u00edguez-Guerra and Pedregal, 1990 ]: A kid named Jaime.","title":"Citations"},{"location":"howtodocs/#latex","text":"Either in blocks \\frac{n!}{k!(n-k)!} = \\binom{n}{k} * Jaime \\frac{n!}{k!(n-k)!} = \\binom{n}{k} * Jaime $$ \\frac {n ! }{k !( n - k )! } = \\binom {n}{k} * Jaime $$ or inline: This my best equation ever: p(x|y) = \\frac{p(y|x)p(x)}{p(y)} p(x|y) = \\frac{p(y|x)p(x)}{p(y)} This my best equation ever: $ p ( x|y ) = \\frac {p ( y|x ) p ( x ) }{p ( y ) } $","title":"LaTeX"},{"location":"howtodocs/#checkboxes","text":"Checkbox Checkbox - [ ] Checkbox - [X] Checkbox","title":"Checkboxes"},{"location":"howtodocs/#emoji","text":"Github shortcuts are supported: :smile: :heart: :thumbsup:","title":"Emoji"},{"location":"howtodocs/#tabbed-fences","text":"Step 1 This is the step 1 Step 2 # This is the step 2 with python code highlighting he = Element ( \"Helium\" ) Step 3 This is the step 3 This line interrupts the fences and creates a new block of tabs Step 4 # This is the step 4 with python code highlighting be = Element ( \"Beryllium\" ) Obtained with: ``` tab=\"Step 1\" This is the step 1 ``` ```python tab=\"Step 2\" # This is the step 2 with python code highlighting he = Element(\"Helium\") ``` ``` tab=\"Step 3\" This is the step 3 ``` This line interrupts the fences and creates a new block of tabs ```python tab=\"Step 4\" # This is the step 4 with python code highlighting be = Element(\"Beryllium\") ```","title":"Tabbed fences"},{"location":"howtodocs/#extra-inline-markup","text":"Code Result ==hey== hey ~~hey~~ hey ^^hey^^ hey a^migo^ a migo --> \u2192","title":"Extra inline markup"},{"location":"howtodocs/#docstrings","text":"We are using mkdocstrings for our docstrings, which deviate slightly from the more popular numpydoc syntax. Instead, it's closer to Google-style docstrings . To sum up, this is a more or less complete example of the requested syntax: \"\"\" A short description of this function. A longer description of this function. You can use more lines. This is code block, as usual. ```python s = \"This is a Python code block :)\" ``` Arguments: param1: An integer? param2: A string? If you have a long description, you can split it on multiple lines. Just remember to indent those lines with at least two more spaces. They will all be concatenated in one line, so do not try to use complex markup here. Note: We omitted the type hints next to the parameters names. Usually you would write something like `param1 (int): ...`, but `mkdocstrings` gets the type information from the signature, so it's not needed here. Exceptions are written the same. Raises: OSError: Explain when this error is thrown. RuntimeError: Explain as well. Multi-line description, etc. Let's see the return value section now. Returns: A description of the value that is returned. Again multiple lines are allowed. They will also be concatenated to one line, so do not use complex markup here. Note: Other words are supported: - `Args`, `Arguments`, `Params` and `Parameters` for the parameters. - `Raise`, `Raises`, `Except`, and `Exceptions` for exceptions. - `Return` or `Returns` for return value. They are all case-insensitive, so you can write `RETURNS:` or `params:`. __Examples__ Experimental support. You need code fences and an extra blank line at the end so they can be highlighted _and_ recognized by `pytest`. Check https://github.com/pawamoy/mkdocstrings/issues/52 for updates. ```python >>> 2 + 2 == 4 True ``` \"\"\"","title":"Docstrings"},{"location":"howtodocs/#real-docstring-examples","text":"Check docs._docstrings_example and its source code below. Example module to show how docstrings are written for mkdocs + mkdocstrings","title":"Real docstring examples"},{"location":"howtodocs/#docs._docstrings_example.example_function","text":"Show source code in docs/_docstrings_example.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def example_function ( arg1 , kwarg = None ) -> object : \"\"\" Example function to demonstrate how APIs are rendered Parameters: arg1 (dict): Some description for this argument. This type (in parenthesis) is ignored. kwarg: Some more descriptions Returns: A description for the returned value __Examples__ This can be automatically tested with `pytest --doctest-modules`! Syntax might change subtly in the future. Check https://github.com/pawamoy/mkdocstrings/issues/52 ```python >>> 2 + 2 == 4 True # this passes pytest >>> 2 + 2 == 5 True # this fails pytest ``` \"\"\" pass Example function to demonstrate how APIs are rendered Parameters Name Type Description Default arg1 _empty Some description for this argument. This type (in parenthesis) is ignored. required kwarg _empty Some more descriptions None Returns Type Description object A description for the returned value Examples This can be automatically tested with pytest --doctest-modules ! Syntax might change subtly in the future. Check https://github.com/pawamoy/mkdocstrings/issues/52 >>> 2 + 2 == 4 True # this passes pytest >>> 2 + 2 == 5 True # this fails pytest","title":"example_function()"},{"location":"howtodocs/#docs._docstrings_example.example_function_with_type_hints","text":"Show source code in docs/_docstrings_example.py 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 def example_function_with_type_hints ( arg1 : dict , kwarg : \"whatever\" = None ) -> object : \"\"\" Example function to demonstrate how APIs are rendered Parameters: arg1: Some description for this argument. kwarg: Some more descriptions Returns: A description for the returned value __Examples__ This can be automatically tested with `pytest --doctest-modules`! Syntax might change subtly in the future. Check https://github.com/pawamoy/mkdocstrings/issues/52 ```python >>> 2 + 2 == 4 True # this passes pytest >>> 2 + 2 == 5 True # this fails pytest ``` \"\"\" pass Example function to demonstrate how APIs are rendered Parameters Name Type Description Default arg1 dict Some description for this argument. required kwarg whatever Some more descriptions None Returns Type Description object A description for the returned value Examples This can be automatically tested with pytest --doctest-modules ! Syntax might change subtly in the future. Check https://github.com/pawamoy/mkdocstrings/issues/52 >>> 2 + 2 == 4 True # this passes pytest >>> 2 + 2 == 5 True # this fails pytest Lorem ipsum dolor sit amet, consectetur adipiscing elit. \u21a9 A kid named Jaime. \u21a9","title":"example_function_with_type_hints()"}]}